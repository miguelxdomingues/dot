//------------------------------------------------------------------------------
// <auto-generated>
// This code was not generated by a tool, this comment is to avoid the code analysis inspection.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Text.Json;
using JsonSerializerApp.Entities;
using JsonSerializerApp.Serialization;

namespace JsonSerializerApp
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                // Create object

                var c1 = new CircularReference("C1");
                var c11 = new CircularReference("C11").SetParent(c1);
                var c111 = new CircularReference("C111").SetParent(c11);
                var c112 = new CircularReference("C112").SetParent(c11);
                var c12 = new CircularReference("C12").SetParent(c1);
                var c121 = new CircularReference("C121").SetParent(c12);
                var c1211 = new CircularReference("C1211").SetParent(c121);
                var c1212 = new CircularReference("C1212").SetParent(c121);

                // Serialize object

                ////string json = StandardSerialization(c1);
                string json = CustomSerialization(c1);

                // Output serialized object

                System.IO.File.WriteAllText("c:\\temp\\Output.json", json);
                Console.WriteLine(json);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();
        }

        private static string StandardSerialization<T>(T obj)
        {
            // Issues:
            // [1] Circular References: https://github.com/dotnet/runtime/issues/29900
            // [2] MaxDepth, https://github.com/dotnet/runtime/issues/882

            var options = new JsonSerializerOptions
            {
                IgnoreNullValues = false,
                IgnoreReadOnlyProperties = false,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DictionaryKeyPolicy = null,
                PropertyNameCaseInsensitive = true,
                WriteIndented = true,
                ////MaxDepth = 7 // [2]
            };

            var json = JsonSerializer.Serialize(obj, options);
            return json;
        }

        private static string CustomSerialization<T>(T obj)
        {
            var options = new CustomConverterOptions
            {
                IgnoreNullValues = false,
                IgnoreReadOnlyProperties = false,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DictionaryKeyPolicy = null,
                PropertyNameCaseInsensitive = true,
                WriteIndented = true,
                ////MaxDepth = 7,
                ////MaxDepthHandling = MaxDepthHandlingOption.CurrentDepth,
                CircularRefHandling = CircularRefHandlingOption.HashCode,
                ////TypeNameHandling = TypeNameHandlingOption.Suppress
            };

            ////options.Converters.Add(new CustomConverter<T>(options));
            options.Converters.Add(new CircularReferenceConverter(options));

            var json = JsonSerializer.Serialize(obj, options.JsonSerializerOptions);
            return json;
        }
    }
}
